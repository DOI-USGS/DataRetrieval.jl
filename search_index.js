var documenterSearchIndex = {"docs":
[{"location":"apiref/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"Documentation for DataRetrieval.jl's public functions.","category":"page"},{"location":"apiref/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"Pages = [\"apiref.md\"]","category":"page"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"CurrentModule = DataRetrieval","category":"page"},{"location":"apiref/#NWIS-Functions","page":"API Reference","title":"NWIS Functions","text":"","category":"section"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"Functions that are related to the National Water Information System(NWIS).","category":"page"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWIS","category":"page"},{"location":"apiref/#DataRetrieval.readNWIS","page":"API Reference","title":"DataRetrieval.readNWIS","text":"readNWIS(obs_url)\n\nFunction to take an NWIS url (typically constructed using the constructNWISURL() function) and return the associated data.\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWISdv","category":"page"},{"location":"apiref/#DataRetrieval.readNWISdv","page":"API Reference","title":"DataRetrieval.readNWISdv","text":"readNWISdv(siteNumbers, parameterCd;\n           startDate=\"\", endDate=\"\", statCd=\"00003\")\n\nFunction to obtain daily value data from the NWIS web service.\n\nExamples\n\njulia> df, response = readNWISdv(\"01646500\", \"00060\",\n                                 startDate=\"2010-10-01\", endDate=\"2010-10-01\");\n\njulia> df  # df contains the formatted data as a DataFrame\n1×5 DataFrame\n Row │ agency_cd  site_no   datetime    68478_00060_00003  68478_00060_00003_c ⋯\n     │ String7    String15  String15    String7            String3             ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ USGS       01646500  2010-10-01  13100              A                   ⋯\n                                                                1 column omitted\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWISpCode","category":"page"},{"location":"apiref/#DataRetrieval.readNWISpCode","page":"API Reference","title":"DataRetrieval.readNWISpCode","text":"readNWISpCode(parameterCd)\n\nFunction to obtain parameter code information from the NWIS web service. As currently implemented, support for multiple parameter codes is not included.\n\nExamples\n\njulia> df, response = readNWISpCode(\"00060\");\n\njulia> df  # df contains the formatted data as a DataFrame\n1×13 DataFrame\n Row │ parameter_cd  group     parm_nm                           epa_equivalen ⋯\n     │ String7       String15  String                            String15      ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ 00060         Physical  Discharge, cubic feet per second  Not checked   ⋯\n                                                              10 columns omitted\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWISqw","category":"page"},{"location":"apiref/#DataRetrieval.readNWISqw","page":"API Reference","title":"DataRetrieval.readNWISqw","text":"readNWISqw(siteNumbers;\n           startDate=\"\", endDate=\"\", expanded=true)\n\nFunction to obtain water quality data from the NWIS web service.\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWISqwdata","category":"page"},{"location":"apiref/#DataRetrieval.readNWISqwdata","page":"API Reference","title":"DataRetrieval.readNWISqwdata","text":"readNWISqwdata(siteNumbers;\n               startDate=\"\", endDate=\"\", expanded=true)\n\nAlias to readNWISqw().\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWISsite","category":"page"},{"location":"apiref/#DataRetrieval.readNWISsite","page":"API Reference","title":"DataRetrieval.readNWISsite","text":"readNWISsite(siteNumbers)\n\nFunction to obtain site information from the NWIS web service.\n\nExamples\n\njulia> df, response = readNWISsite(\"05114000\");\n\njulia> df  # df contains the formatted data as a DataFrame\n1×12 DataFrame\n Row │ agency_cd  site_no   station_nm                    site_tp_cd  dec_lat_ ⋯\n     │ String7    String15  String31                      String3     String15 ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ USGS       05114000  SOURIS RIVER NR SHERWOOD, ND  ST          48.99001 ⋯\n                                                               8 columns omitted\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWISunit","category":"page"},{"location":"apiref/#DataRetrieval.readNWISunit","page":"API Reference","title":"DataRetrieval.readNWISunit","text":"readNWISunit(siteNumbers, parameterCd; startDate=\"\", endDate=\"\")\n\nFunction to obtain instantaneous value data from the NWIS web service.\n\nExamples\n\njulia> df, response = readNWISunit(\"01646500\", \"00060\",\n                                   startDate=\"2022-12-29\",\n                                   endDate=\"2022-12-29\");\n\njulia> first(df)  # df contains the formatted data as a DataFrame\nDataFrameRow\n Row │ agency_cd  site_no   datetime          tz_cd    69928_00060  69928_0006 ⋯\n     │ String7    String15  String31          String3  String7      String3    ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ USGS       01646500  2022-12-29 00:00  EST      12700        P          ⋯\n                                                                1 column omitted\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWISuv","category":"page"},{"location":"apiref/#DataRetrieval.readNWISuv","page":"API Reference","title":"DataRetrieval.readNWISuv","text":"readNWISuv(siteNumbers, parameterCd; startDate=\"\", endDate=\"\")\n\nAlias for readNWISunit().\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readNWISiv","category":"page"},{"location":"apiref/#DataRetrieval.readNWISiv","page":"API Reference","title":"DataRetrieval.readNWISiv","text":"readNWISiv(siteNumbers, parameterCd; startDate=\"\", endDate=\"\")\n\nAlias for readNWISunit().\n\n\n\n\n\n","category":"function"},{"location":"apiref/#WQP-Functions","page":"API Reference","title":"WQP Functions","text":"","category":"section"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"Functions that are related to the Water Quality Portal.","category":"page"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readWQPdata","category":"page"},{"location":"apiref/#DataRetrieval.readWQPdata","page":"API Reference","title":"DataRetrieval.readWQPdata","text":"readWQPdata(service; kwargs...)\n\nFlexible querying of the WQP. See other functions for specific queries.\n\nArguments\n\nservice::String: The WQP service to query. One of \"Result\", \"Station\", \"Organization\", \"Project\", \"Activity\", \"ResultDetectionQuantitationLimit\", \"BiologicalMetric\", \"ProjectMonitoringLocationWeighting\", or \"ActivityMetric\".\n\nKeyword Arguments\n\nsiteid::String: Concatenate an agency code, a hyphen (\"-\"), and a site-identification number.\nstatecode::String: State code to search within. Concatenate 'US', a colon (\":\"), and a FIPS numeric code (Example: Illinois is US:17).\ncountycode::String: FIPS county code to search within.\nhuc::String: One or more eight-digit HUC codes, delimited by semicolons.\nbBox::String: Bounding box to search within. Format is \"minx,miny,maxx,maxy\" (Example: bBox=\"-92.8,44.2,-88.9,46.0\").\nlat::String: Latitude for radial search in decimal degrees, WGS84.\nlong::String: Longitude for radial search in decimal degrees, WGS84.\nwithin::String: Distance for radial search in decimal miles.\npCode::String: One or more five-digit USGS parameter codes, delimited by semicolons.\nstartDateLo::String: Start date for search in MM-DD-YYYY format.\nstartDateHi::String: End date for search in MM-DD-YYYY format.\ncharacteristicName::String: One or more characteristic names, delimited by semicolons. (See https://www.waterqualitydata.us/public_srsnames/ for available characteristic names).\n\nExamples\n\njulia> df, response = readWQPdata(\"Result\",\n                                  lat=\"44.2\", long=\"-88.9\", within=\"0.5\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName             ActivityIdentifier\n     │ InlineStrings.String15  String                             String31\n─────┼───────────────────────────────────────────────────────────────────────────────\n   1 │ WIDNR_WQX               Wisconsin Department of Natural …  WIDNR_WQX-35940585\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"readWQPresults","category":"page"},{"location":"apiref/#DataRetrieval.readWQPresults","page":"API Reference","title":"DataRetrieval.readWQPresults","text":"readWQPresults(; kwargs...)\n\nQuery the WQP for results.\n\nExamples\n\njulia> df, response = readWQPresults(lat=\"44.2\", long=\"-88.9\", within=\"0.5\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName             ActivityIdentifier\n     │ InlineStrings.String15  String                             String31\n─────┼───────────────────────────────────────────────────────────────────────────────\n   1 │ WIDNR_WQX               Wisconsin Department of Natural …  WIDNR_WQX-35940585\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"whatWQPsites","category":"page"},{"location":"apiref/#DataRetrieval.whatWQPsites","page":"API Reference","title":"DataRetrieval.whatWQPsites","text":"whatWQPsites(; kwargs...)\n\nFunction to search WQP for sites within a region with specific data.\n\nExamples\n\njulia> df, response = whatWQPsites(lat=\"44.2\", long=\"-88.9\", within=\"2.5\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName             MonitoringLocationIdentifier\n     │ InlineStrings.String15  String                             InlineStrings.String31\n─────┼─────────────────────────────────────────────────────────────────────────────────────────\n   1 │ USGS-WI                 USGS Wisconsin Water Science Cen…  USGS-441159088505801\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"whatWQPorganizations","category":"page"},{"location":"apiref/#DataRetrieval.whatWQPorganizations","page":"API Reference","title":"DataRetrieval.whatWQPorganizations","text":"whatWQPorganizations(; kwargs...)\n\nFunction to search WQP for organizations within a region with specific data.\n\nExamples\n\njulia> df, response = whatWQPorganizations(huc=\"12\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName         OrganizationDescriptionText\n     │ InlineStrings.String31  String                         Union{Missing, String}\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ ARS                     Agricultural Research Service  missing\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"whatWQPprojects","category":"page"},{"location":"apiref/#DataRetrieval.whatWQPprojects","page":"API Reference","title":"DataRetrieval.whatWQPprojects","text":"whatWQPprojects(; kwargs...)\n\nFunction to search WQP for projects within a region with specific data.\n\nExamples\n\njulia> df, response = whatWQPprojects(huc=\"19\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName             ProjectIdentifier\n     │ InlineStrings.String31  String                             String\n─────┼──────────────────────────────────────────────────────────────────────────────\n   1 │ 21AKBCH                 Alaska Department of Environment…  AK164406\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"whatWQPactivities","category":"page"},{"location":"apiref/#DataRetrieval.whatWQPactivities","page":"API Reference","title":"DataRetrieval.whatWQPactivities","text":"whatWQPactivities(; kwargs...)\n\nFunction to search WQP for activities within a region with specific data.\n\nExamples\n\njulia> df, response = whatWQPactivities(statecode=\"US:11\",\n                                        startDateLo=\"12-30-2019\",\n                                        startDateHi=\"01-01-2020\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName             ActivityIdentifier\n     │ InlineStrings.String7   String                             String31\n─────┼───────────────────────────────────────────────────────────────────────────────\n   1 │ USGS-MD                 USGS Maryland Water Science Cent…  nwismd.01.02000322\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"whatWQPdetectionLimits","category":"page"},{"location":"apiref/#DataRetrieval.whatWQPdetectionLimits","page":"API Reference","title":"DataRetrieval.whatWQPdetectionLimits","text":"whatWQPdetectionLimits(; kwargs...)\n\nFunction to search WQP for detection limits within a region with specific data.\n\nExamples\n\njulia> df, response = whatWQPdetectionLimits(statecode=\"US:44\",\n                                             characteristicName=\"Nitrite\",\n                                             startDateLo=\"01-01-2021\",\n                                             startDateHi=\"02-20-2021\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName             ActivityIdentifier\n     │ InlineStrings.String7   String                             String31\n─────┼───────────────────────────────────────────────────────────────────────────────\n   1 │ USGS-MA                 USGS Massachusetts Water Science…  nwisma.01.02100548\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"whatWQPhabitatMetrics","category":"page"},{"location":"apiref/#DataRetrieval.whatWQPhabitatMetrics","page":"API Reference","title":"DataRetrieval.whatWQPhabitatMetrics","text":"whatWQPhabitatMetrics(; kwargs...)\n\nFunction to search WQP for habitat metrics within a region with specific data.\n\nExamples\n\njulia> df, response = whatWQPhabitatMetrics(statecode=\"US:44\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  MonitoringLocationIdentifier  IndexIdentifier\n     │ InlineStrings.String15  InlineStrings.String31        String\n─────┼───────────────────────────────────────────────────────────────────────────────\n   1 │ NARS_WQX                NARS_WQX-NEWS04-4201          PH:NEWS04-4201:1:BKA_Q3\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"whatWQPprojectWeights","category":"page"},{"location":"apiref/#DataRetrieval.whatWQPprojectWeights","page":"API Reference","title":"DataRetrieval.whatWQPprojectWeights","text":"whatWQPprojectWeights(; kwargs...)\n\nFunction to search WQP for project weights within a region with specific data.\n\nExamples\n\njulia> df, response = whatWQPprojectWeights(statecode=\"US:38\",\n                                            startDateLo=\"01-01-2006\",\n                                            startDateHi=\"01-01-2008\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName             ProjectIdentifier\n     │ InlineStrings.String15  String                             String31\n─────┼───────────────────────────────────────────────────────────────────────────────────────\n   1 │ NARS_WQX                EPA National Aquatic Resources S…  NARS_NLA2007_ECOREGION_NPL\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"whatWQPactivityMetrics","category":"page"},{"location":"apiref/#DataRetrieval.whatWQPactivityMetrics","page":"API Reference","title":"DataRetrieval.whatWQPactivityMetrics","text":"whatWQPactivityMetrics(; kwargs...)\n\nFunction to search WQP for activity metrics within a region with specific data.\n\nExamples\n\njulia> df, response = whatWQPactivityMetrics(statecode=\"US:38\",\n                                             startDateLo=\"07-01-2006\",\n                                             startDateHi=\"12-01-2006\");\n\njulia> first(df)[1:3]\nDataFrameRow\n Row │ OrganizationIdentifier  OrganizationFormalName        MonitoringLocationIdentifier\n     │ InlineStrings.String15  InlineStrings.String31        InlineStrings.String31\n─────┼────────────────────────────────────────────────────────────────────────────────────\n   1 │ EMAP_GRE                EMAP-Great Rivers Ecosystems  EMAP_GRE-GRE06604-1268\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"constructNWISURL","category":"page"},{"location":"apiref/#DataRetrieval.constructNWISURL","page":"API Reference","title":"DataRetrieval.constructNWISURL","text":"constructNWISURL(siteNumbers; parameterCd=\"00060\",\n    startDate=\"\", endDate=\"\", service=\"site\", statCd=\"00003\",\n    format=\"xml\", expanded=True, ratingType=\"base\", statReportType=\"daily\",\n    statType=\"mean\")\n\nConstruct a URL to be used to make an API query to the NWIS service.\n\n\n\n\n\n","category":"function"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"constructWQPURL","category":"page"},{"location":"apiref/#DataRetrieval.constructWQPURL","page":"API Reference","title":"DataRetrieval.constructWQPURL","text":"constructWQPURL(service)\n\nFunction to construct the URL for the WQP service.\n\n\n\n\n\n","category":"function"},{"location":"disclaimer/","page":"Disclaimer","title":"Disclaimer","text":"EditURL = \"https://code.usgs.gov/water/computational-tools/DataRetrieval.jl/-/blob/main/DISCLAIMER.md\"","category":"page"},{"location":"disclaimer/#Disclaimer","page":"Disclaimer","title":"Disclaimer","text":"","category":"section"},{"location":"disclaimer/","page":"Disclaimer","title":"Disclaimer","text":"This software is preliminary or provisional and is subject to revision. It is being provided to meet the need for timely best science. The  software has not received final approval by the U.S. Geological Survey (USGS). No warranty, expressed or implied, is made by the USGS or the U.S. Government as to the functionality of the software and related material nor shall the fact of release constitute any such warranty. The software is provided on the condition that neither the USGS nor the U.S. Government shall be held liable for any damages resulting from the authorized or unauthorized use of the software.","category":"page"},{"location":"license/","page":"License","title":"License","text":"EditURL = \"https://code.usgs.gov/water/computational-tools/DataRetrieval.jl/-/blob/main/LICENSE.md\"","category":"page"},{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"Unless otherwise noted, this project is in the public domain in the United States because it contains materials that originally came from the United States Geological Survey, an agency of the United States Department of Interior. For more information, see the official USGS copyright policy at https://www.usgs.gov/information-policies-and-instructions/copyrights-and-creditsAdditionally, we waive copyright and related rights in the work worldwide through the CC0 1.0 Universal public domain dedication.CC0 1.0 Universal SummaryThis is a human-readable summary of the Legal Code (read the full text).No CopyrightThe person who associated a work with this deed has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by law.You can copy, modify, distribute and perform the work, even for commercial purposes, all without asking permission.Other InformationIn no way are the patent or trademark rights of any person affected by CC0, nor are the rights that other persons may have in the work or in how the work is used, such as publicity or privacy rights.Unless expressly stated otherwise, the person who associated a work with this deed makes no warranties about the work, and disclaims liability for all uses of the work, to the fullest extent permitted by applicable law. When using or citing the work, you should not imply endorsement by the author or the affirmer.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"EditURL = \"https://code.usgs.gov/water/computational-tools/DataRetrieval.jl/-/blob/main/CONTRIBUTING.md\"","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Contributions are welcome from the community. Questions can be asked by opening issues. Before creating a new issue, please take a moment to search and make sure a similar issue does not already exist. If one does exist, you can comment to show your support for that issue.If you have direct contributions you would like considered for incorporation into the project, you can fork the repository and submit a pull request for review. Prior to beginning work on substantial feature development, we ask that you first open an issue or contact code maintainers to help formulate the scope of the work effort, and to ensure that someone else is not already working to implement the same thing!Contribution WorkflowThe \"canonical\" repository for this project is the GitLab Repository. Contributions and development can be done on GitHub, but no merges or commits can be performed there. The GitHub repository is actually a mirror of the GitLab project. Therefore, commits must be made by a maintainer on the GitLab project which are then mirrored to the GitHub repository. The workflow below illustrates this process.Development can happen on GitHub, however the pull requests will be incorporated on GitLab which is then mirrored back to GitHub. This requires a maintainer with write-access on GitLab to take changes from the pull request and push them up to GitLab instead of accepting the pull request on GitHub. Doing this correctly will preserve the authorship of the changes and commits, and will also close the GitHub pull request and any associated issues.(Image: mirror-workflow) (Image: mirror-workflow)","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Index","page":"Examples","title":"Index","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Pages = [\"examples.md\"]","category":"page"},{"location":"examples/#NWIS-Examples","page":"Examples","title":"NWIS Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples use data retrieved from the National Water Information System(NWIS).","category":"page"},{"location":"examples/#Examining-Site-01491000","page":"Examples","title":"Examining Site 01491000","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this example we fetch some data for site \"01491000\" located on the Choptank River near Greensboro, MD.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First we will obtain information about the site itself.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataRetrieval\nsiteNumber = \"01491000\"\ndf, response = readNWISsite(siteNumber);\n\n# print the site information table\ndf","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also look at the raw API GET query response, which is kept as a HTTP.Messages.Response object. For example, we can look at the status of the GET request; a 200 code, for example, indicates a successful response.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# print the response status code\nresponse.status","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"So as you can see, we were successful in our query (which we knew from looking at our formatted data frame earlier anyway).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can also get actual measurement data for this site, such as daily discharge values. We will obtain daily discharge values for the first three days in January of 1980 below.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"df, response = readNWISdv(siteNumber, \"00060\",\n                          startDate=\"1980-01-01\", endDate=\"1980-01-03\");\n\n# print the data frame containing discharge values\ndf","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Once again we can also examine the raw GET request object. Rather than just look at the status of the GET query, this time we will look at the request itself, which contains information such as the actual GET query and the API host.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"response.request","category":"page"},{"location":"examples/#Plotting-One-Day's-Flow-Data-for-Site-01646500","page":"Examples","title":"Plotting One Day's Flow Data for Site 01646500","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this example we will plot the flow data for one day for site \"01646500\". Site \"01646500\" is located on the Potomac River near Washington D.C. at the Little Falls pump station.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First we can query the instantaneous flow data from December 1, 2022:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataRetrieval\nsiteNumber = \"01646500\"\ndf, response = readNWISiv(siteNumber, \"00060\", startDate=\"2022-12-01\",\n                          endDate=\"2022-12-01\");\n# display the first row of the data frame\nfirst(df)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We have requested discharge data using the parameter code \"00060\". We can get additional information about this parameter code, such as the units discharge is measured in, by using the readNWISpCode function.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"pcodedf, response = readNWISpCode(\"00060\");\npcodedf","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can see that the units for discharge are cubic feet per second. Now when we plot the discharge data, we can properly label the y-axis.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# convert the date time column to a DateTime type\nusing Dates\ntimestamps = Dates.DateTime.(df.datetime, \"yyy-mm-dd HH:MM\");\n# convert the discharge values to a float type\ndischarge = map(x->parse(Float64,x), df.\"69928_00060\");\n# make the plot\nusing Plots\nplot(timestamps, discharge,\n     title=\"Discharge at Little Falls Pump Station, Dec. 1, 2022\",\n     ylabel=\"Discharge (ft³/s)\",\n     xlabel=\"Timestamp\",\n     xrotation=60,\n     label=\"Discharge\",\n     dpi=200)","category":"page"},{"location":"examples/#Fetching-and-Plotting-Groundwater-Levels-from-Site-393617075380403","page":"Examples","title":"Fetching and Plotting Groundwater Levels from Site 393617075380403","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this example we will fetch and plot daily groundwater levels from site \"393617075380403\". This site is located in the state of Delaware.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First we will fetch the groundwater levels (parameter code \"72019\") for the first six months of 2012 using the readNWISdv function.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataRetrieval\nsiteNumber = \"393617075380403\"\ndf, response = readNWISdv(siteNumber, \"72019\",\n                          startDate=\"2012-01-01\", endDate=\"2012-06-30\");\n# display the first row of the data frame\nfirst(df)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can get additional information about this parameter code, such as the units groundwater levels are measured in, by using the readNWISpCode function.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"pcodedf, response = readNWISpCode(\"72019\");\npcodedf","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can see that the units for groundwater levels are feet below land surface. Now when we plot the groundwater levels, we can properly label the y-axis.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# convert the date time column to a DateTime type\nusing Dates\ntimestamps = Dates.DateTime.(df.datetime, \"yyy-mm-dd HH:MM\");\n# convert the groundwater level values to a float type\ngwlevels = parse.(Float64, df.\"276495_72019_00003\");\n# make the plot\nusing Plots\nplot(timestamps, gwlevels,\n     title=\"Groundwater Levels at Site 393617075380403\",\n     ylabel=\"Groundwater Level,\\nfeet below land surface\",\n     xlabel=\"Timestamp\",\n     xrotation=60,\n     label=\"Groundwater Level\",\n     dpi=200,\n     margin=5Plots.mm)","category":"page"},{"location":"examples/#WQP-Examples","page":"Examples","title":"WQP Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples use data retrieved from the Water Quality Portal.","category":"page"},{"location":"examples/#Identifying-Water-Quality-Sites-with-Chloride-Measurements","page":"Examples","title":"Identifying Water Quality Sites with Chloride Measurements","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this example we will identify sites that have chloride measurements in the state of New Jersey, which is represented by the state code \"US:34\". To do this we query the Water Quality Portal using the whatWQPsites function.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DataRetrieval\nnjcl, response = whatWQPsites(statecode=\"US:34\",\n                              characteristicName=\"Chloride\");\n# print the size of the data frame (rows x columns)\nsize(njcl)","category":"page"},{"location":"#DataRetrieval.jl-Documentation","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"","category":"section"},{"location":"#Introduction","page":"DataRetrieval.jl Documentation","title":"Introduction","text":"","category":"section"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"DataRetrieval.jl is a Julia package for retrieving data USGS water data and is based off of the popular R package of the same name. Both R and Python versions of data retrieval are available: R, Python. Development of the package currently takes place on GitLab, in the DataRetrieval.jl repository.","category":"page"},{"location":"#Installation","page":"DataRetrieval.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"#User-Installation","page":"DataRetrieval.jl Documentation","title":"User Installation","text":"","category":"section"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"Currently only installation from the git repository is supported. To install the package, you can use the Pkg REPL (hitting ] from the Julia REPL):","category":"page"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"pkg> add https://code.usgs.gov/water/computational-tools/DataRetrieval.jl.git","category":"page"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"This is equivalent to the following code using the Julia REPL:","category":"page"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"> using Pkg\n> Pkg.add(https://code.usgs.gov/water/computational-tools/DataRetrieval.jl.git)","category":"page"},{"location":"#Developer-Installation","page":"DataRetrieval.jl Documentation","title":"Developer Installation","text":"","category":"section"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"When developing in Julia, we recommend using an environment as well as the Revise package so that you do not need to keep track of individual dependencies or re-compile the package every time you make a change. Development takes place using git for version control. A fork and clone workflow is recommended, where a developer first creates a \"fork\" of the repository, and then \"clones\" that fork to work locally on an individual feature branch.","category":"page"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"Once you have a local clone of the repository, from within that repository and in the Pkg REPL, the following commands should create a working environment (taken from the Pkg.jl documentation):","category":"page"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"pkg> activate .\n(DataRetrieval) pkg> instantiate","category":"page"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"To use Revise to help streamline development and avoid having to re-compile the package every time you make a modification, you should begin your Julia sessions with the following:","category":"page"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"using Revise\nusing DataRetrieval","category":"page"},{"location":"#Branches","page":"DataRetrieval.jl Documentation","title":"Branches","text":"","category":"section"},{"location":"","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"Note that for the DataRetrieval.jl project there are two branches to be aware of. The \"main\" branch is designed to be the stable and most-used branch, it has documentation here. The \"dev\" branch is designed for development and prototyping of new or upcoming features. As such, installation from the \"dev\" branch is not recommended for novice users, but can be useful for developers to work on, propose, or test new functionality or documentation. There is documentation for the \"dev\" branch available here.","category":"page"}]
}
