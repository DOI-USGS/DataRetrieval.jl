var documenterSearchIndex = {"docs":
[{"location":"apiref.html#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"Documentation for DataRetrieval.jl's public functions.","category":"page"},{"location":"apiref.html#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"Pages = [\"apiref.md\"]","category":"page"},{"location":"apiref.html#Reference","page":"API Reference","title":"Reference","text":"","category":"section"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"CurrentModule = DataRetrieval","category":"page"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"readNWISdv","category":"page"},{"location":"apiref.html#DataRetrieval.readNWISdv","page":"API Reference","title":"DataRetrieval.readNWISdv","text":"readNWISdv(siteNumbers, parameterCd;\n           startDate=\"\", endDate=\"\", statCd=\"00003\")\n\nFunction to obtain daily value data from the NWIS web service.\n\nExamples\n\njulia> df, response = readNWISdv(\"01646500\", \"00060\",\n                                 startDate=\"2010-10-01\", endDate=\"2010-10-01\");\n\njulia> df  # df contains the formatted data as a DataFrame\n1×5 DataFrame\n Row │ agency_cd  site_no   datetime    68478_00060_00003  68478_00060_00003_c ⋯\n     │ String7    String15  String15    String7            String3             ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ USGS       01646500  2010-10-01  13100              A                   ⋯\n                                                                1 column omitted\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"readNWISpCode","category":"page"},{"location":"apiref.html#DataRetrieval.readNWISpCode","page":"API Reference","title":"DataRetrieval.readNWISpCode","text":"readNWISpCode(parameterCd)\n\nFunction to obtain parameter code information from the NWIS web service. As currently implemented, support for multiple parameter codes is not included.\n\nExamples\n\njulia> df, response = readNWISpCode(\"00060\");\n\njulia> df  # df contains the formatted data as a DataFrame\n1×13 DataFrame\n Row │ parameter_cd  group     parm_nm                           epa_equivalen ⋯\n     │ String7       String15  String                            String15      ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ 00060         Physical  Discharge, cubic feet per second  Not checked   ⋯\n                                                              10 columns omitted\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"readNWISqw","category":"page"},{"location":"apiref.html#DataRetrieval.readNWISqw","page":"API Reference","title":"DataRetrieval.readNWISqw","text":"readNWISqw(siteNumbers;\n           startDate=\"\", endDate=\"\", expanded=true)\n\nFunction to obtain water quality data from the NWIS web service.\n\n\n\n\n\n","category":"function"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"readNWISqwdata","category":"page"},{"location":"apiref.html#DataRetrieval.readNWISqwdata","page":"API Reference","title":"DataRetrieval.readNWISqwdata","text":"readNWISqwdata(siteNumbers;\n               startDate=\"\", endDate=\"\", expanded=true)\n\nAlias to readNWISqw().\n\n\n\n\n\n","category":"function"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"readNWISunit","category":"page"},{"location":"apiref.html#DataRetrieval.readNWISunit","page":"API Reference","title":"DataRetrieval.readNWISunit","text":"readNWISunit(siteNumbers, parameterCd; startDate=\"\", endDate=\"\")\n\nFunction to obtain instantaneous value data from the NWIS web service.\n\nExamples\n\njulia> df, response = readNWISunit(\"01646500\", \"00060\",\n                                   startDate=\"2022-12-29\",\n                                   endDate=\"2022-12-29\");\n\njulia> first(df)  # df contains the formatted data as a DataFrame\nDataFrameRow\n Row │ agency_cd  site_no   datetime          tz_cd    69928_00060  69928_0006 ⋯\n     │ String7    String15  String31          String3  String7      String3    ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │ USGS       01646500  2022-12-29 00:00  EST      12700        P          ⋯\n                                                                1 column omitted\n\njulia> typeof(response)  # response is the unmodified HTTP GET response object\nHTTP.Messages.Response\n\n\n\n\n\n","category":"function"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"readNWISuv","category":"page"},{"location":"apiref.html#DataRetrieval.readNWISuv","page":"API Reference","title":"DataRetrieval.readNWISuv","text":"readNWISuv(siteNumbers, parameterCd; startDate=\"\", endDate=\"\")\n\nAlias for readNWISunit().\n\n\n\n\n\n","category":"function"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"readNWISiv","category":"page"},{"location":"apiref.html#DataRetrieval.readNWISiv","page":"API Reference","title":"DataRetrieval.readNWISiv","text":"readNWISiv(siteNumbers, parameterCd; startDate=\"\", endDate=\"\")\n\nAlias for readNWISunit().\n\n\n\n\n\n","category":"function"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"constructNWISURL","category":"page"},{"location":"apiref.html#DataRetrieval.constructNWISURL","page":"API Reference","title":"DataRetrieval.constructNWISURL","text":"constructNWISURL(siteNumbers; parameterCd=\"00060\",\n    startDate=\"\", endDate=\"\", service=\"site\", statCd=\"00003\",\n    format=\"xml\", expanded=True, ratingType=\"base\", statReportType=\"daily\",\n    statType=\"mean\")\n\nConstruct a URL to be used to make an API query to the NWIS service.\n\n\n\n\n\n","category":"function"},{"location":"apiref.html","page":"API Reference","title":"API Reference","text":"readNWIS","category":"page"},{"location":"apiref.html#DataRetrieval.readNWIS","page":"API Reference","title":"DataRetrieval.readNWIS","text":"readNWIS(obs_url)\n\nFunction to take an NWIS url (typically constructed using the constructNWISURL() function) and return the associated data.\n\n\n\n\n\n","category":"function"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html#Index","page":"Examples","title":"Index","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Pages = [\"examples.md\"]","category":"page"},{"location":"examples.html#Examining-Site-01491000","page":"Examples","title":"Examining Site 01491000","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In this example we fetch some data for site \"01491000\" located on the Choptank River near Greensboro, MD.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"First we will obtain information about the site itself.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using DataRetrieval\nsiteNumber = \"01491000\"\ndf, response = readNWISsite(siteNumber);\n\n# print the site information table\ndf","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"We can also look at the raw API GET query response, which is kept as a HTTP.Messages.Response object. For example, we can look at the status of the GET request; a 200 code, for example, indicates a successful response.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"# print the response status code\nresponse.status","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"So as you can see, we were successful in our query (which we knew from looking at our formatted data frame earlier anyway).","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"We can also get actual measurement data for this site, such as daily discharge values. We will obtain daily discharge values for the first three days in January of 1980 below.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"df, response = readNWISdv(siteNumber, \"00060\",\n                          startDate=\"1980-01-01\", endDate=\"1980-01-03\")\n\n# print the data frame containing discharge values\ndf","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Once again we can also examine the raw GET request object. Rather than just look at the status of the GET query, this time we will look at the request itself, which contains information such as the actual GET query and the API host.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"response.request","category":"page"},{"location":"examples.html#Plotting-One-Day's-Flow-Data-for-Site-01646500","page":"Examples","title":"Plotting One Day's Flow Data for Site 01646500","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"In this example we will plot the flow data for one day for site \"01646500\". Site \"01646500\" is located on the Potomac River near Washington D.C. at the Little Falls pump station.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"First we can query the instantaneous flow data from December 1, 2022:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using DataRetrieval\nsiteNumber = \"01646500\"\ndf, response = readNWISiv(siteNumber, \"00060\", startDate=\"2022-12-01\",\n                          endDate=\"2022-12-01\");\n# display the first row of the data frame\nfirst(df)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"We have requested discharge data using the parameter code \"00060\". We can get additional information about this parameter code, such as the units discharge is measured in, by using the readNWISpCode function.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"pcodedf, response = readNWISpCode(\"00060\")\npcodedf","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"We can see that the units for discharge are cubic feet per second. Now when we plot the discharge data, we can properly label the y-axis.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"# convert the date time column to a DateTime type\nusing Dates\ntimestamps = Dates.DateTime.(df.datetime, \"yyy-mm-dd HH:MM\");\n# convert the discharge values to a float type\ndischarge = map(x->parse(Float64,x),df.\"69928_00060\");\n# make the plot\nusing Plots\nplot(timestamps, discharge,\n     title=\"Discharge at Little Falls Pump Station, Dec. 1, 2022\",\n     ylabel=\"Discharge (ft³/s)\",\n     xlabel=\"Timestamp\",\n     xrotation=60,\n     label=\"Discharge\",\n     dpi=200)","category":"page"},{"location":"index.html#DataRetrieval.jl-Documentation","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"","category":"section"},{"location":"index.html#Introduction","page":"DataRetrieval.jl Documentation","title":"Introduction","text":"","category":"section"},{"location":"index.html","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"DataRetrieval.jl is a Julia package for retrieving data USGS water data and is based off of the popular R package of the same name. Both R and Python versions of data retrieval are available: R, Python. Development of the package currently takes place on GitLab, in the DataRetrieval.jl repository.","category":"page"},{"location":"index.html#Installation","page":"DataRetrieval.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"Currently only the development version of DataRetrieval.jl is available. To install the development version, you can use the Julia package manager and point to the git repository:","category":"page"},{"location":"index.html","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"] add https://code.usgs.gov/wma/iow/computational-tools/DataRetrieval.jl.git","category":"page"},{"location":"index.html","page":"DataRetrieval.jl Documentation","title":"DataRetrieval.jl Documentation","text":"When developing in Julia, we recommend using the Revise package so that you do not need to keep re-compiling the package every time you make a change.","category":"page"}]
}
